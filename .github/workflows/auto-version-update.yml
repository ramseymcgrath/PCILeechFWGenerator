name: Auto Version Update

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'src/__version__.py'
      - 'CHANGELOG.md'
      - '.github/workflows/**'
      - 'docs/**'
      - '*.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-version-update:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip version]') }}
    
    steps:
    - uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for version analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install GitPython
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check if version update needed
      id: check_update
      run: |
        python scripts/update_version.py --dry-run
        echo "update_needed=$?" >> $GITHUB_OUTPUT
    
    - name: Update version
      id: update_version
      if: steps.check_update.outputs.update_needed == '0'
      run: |
        python scripts/update_version.py
        echo "version_updated=true" >> $GITHUB_OUTPUT
    
    - name: Commit version update
      if: steps.update_version.outputs.version_updated == 'true'
      run: |
        git add src/__version__.py
        git commit -m "chore: auto-update version and build metadata [skip ci]"
        git push
    
    - name: Create version update summary
      if: steps.update_version.outputs.version_updated == 'true'
      run: |
        echo "## ðŸš€ Version Auto-Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version:** ${{ steps.update_version.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version:** ${{ steps.update_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type:** ${{ steps.update_version.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The version has been automatically updated based on recent commits." >> $GITHUB_STEP_SUMMARY

  trigger-release-check:
    needs: auto-version-update
    runs-on: ubuntu-latest
    if: needs.auto-version-update.outputs.version_updated == 'true'
    
    steps:
    - uses: actions/checkout@v5
      with:
        ref: main  # Get the updated version
    
    - name: Check if release should be triggered
      id: check_release
      run: |
        # Get the new version
        NEW_VERSION=$(python -c "import sys; sys.path.append('src'); from __version__ import __version__; print(__version__)")
        
        # Check if this is a significant version (not just patch)
        if [[ "$NEW_VERSION" =~ \.[0-9]+\.0$ ]] || [[ "$NEW_VERSION" =~ ^[1-9][0-9]*\.0\.0$ ]]; then
          echo "significant_version=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "significant_version=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release PR
      if: steps.check_release.outputs.significant_version == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.check_release.outputs.version }}';
          
          // Create a release preparation branch
          const branchName = `release/v${version}`;
          
          try {
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.sha
            });
            
            // Create PR for release preparation
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Prepare release v${version}`,
              head: branchName,
              base: 'main',
              body: `## Release Preparation v${version}
              
              This PR prepares the release for version ${version}.
              
              ### Changes
              - Version updated to ${version}
              - Build metadata updated
              
              ### Next Steps
              1. Review and merge this PR
              2. Create a release tag
              3. Publish to PyPI
              
              **Note:** This PR was automatically created by the version update workflow.`
            });
            
            console.log(`Created release preparation PR for v${version}`);
          } catch (error) {
            console.log(`Branch or PR might already exist: ${error.message}`);
          }